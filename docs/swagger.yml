# docs/swagger.yml

openapi: 3.0.0
info:
  title: Authentication API
  version: 1.0.0
  description: API para autenticação de usuários com JWT e gerenciamento de sessão via Redis

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtido através do login

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  description: Nome completo do usuário
                  example: "João Silva"
                email:
                  type: string
                  format: email
                  description: Email do usuário
                  example: "joao@example.com"
                password:
                  type: string
                  minLength: 6
                  description: Senha do usuário (mínimo 6 caracteres)
                  example: "123456"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  email:
                    type: string
        '400':
          description: Invalid input data
        '409':
          description: User already exists

  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email do usuário
                  example: "joao@example.com"
                password:
                  type: string
                  description: Senha do usuário
                  example: "123456"
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token para autenticação
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      email:
                        type: string
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      summary: Log out a user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: No token provided or invalid token

  /protected:
    get:
      summary: Access protected route
      tags:
        - Protected Routes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Access granted to protected route
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This is a protected route"
                  user:
                    type: object
                    properties:
                      userId:
                        type: string
                      email:
                        type: string
        '401':
          description: No token provided or invalid token
        '403':
          description: Token has been revoked